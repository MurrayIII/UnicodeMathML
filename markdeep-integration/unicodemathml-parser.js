/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function(root) {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleFunctions = { unicodemath: peg$parseunicodemath },
        peg$startRuleFunction  = peg$parseunicodemath,

        peg$c0 = "\n",
        peg$c1 = peg$literalExpectation("\n", false),
        peg$c2 = function(c, n) {
            return {unicodemath: {content: flatten(c.map(e => [e[0]].concat(e[1]))), eqnumber: n}};
        },
        peg$c3 = function(n) {
            return n.map(x => ({newline: null}));
        },
        peg$c4 = function(n) {
            return n.map(x => x[1]).join("");
        },
        peg$c5 = /^[0-9]/,
        peg$c6 = peg$classExpectation([["0", "9"]], false, false),
        peg$c7 = function(n) {
            return parseInt(n.join(''))
        },
        peg$c8 = " ",
        peg$c9 = peg$literalExpectation(" ", false),
        peg$c10 = function(w) {
            return w.join('');
        },
        peg$c11 = /^[\u208A\u208B]/,
        peg$c12 = peg$classExpectation(["\u208A", "\u208B"], false, false),
        peg$c13 = /^[\u2080\u2081\u2082\u2083\u2084\u2085\u2086\u2087\u2088\u2089]/,
        peg$c14 = peg$classExpectation(["\u2080", "\u2081", "\u2082", "\u2083", "\u2084", "\u2085", "\u2086", "\u2087", "\u2088", "\u2089"], false, false),
        peg$c15 = function(s, n) {
            var nPrime = {number: replaceMap("₀₁₂₃₄₅₆₇₈₉", "0123456789", n)};
            if (s) {
                return [{operator: replaceMap("₊₋", "+-", s)}, nPrime];
            }
            return nPrime;
        },
        peg$c16 = "\u208A\u208B",
        peg$c17 = peg$literalExpectation("\u208A\u208B", false),
        peg$c18 = function(o) {return {operator: "\u00B1"}},
        peg$c19 = "\u208B\u208A",
        peg$c20 = peg$literalExpectation("\u208B\u208A", false),
        peg$c21 = function(o) {return {operator: "\u2213"}},
        peg$c22 = /^[\u208A\u208B\u208C]/,
        peg$c23 = peg$classExpectation(["\u208A", "\u208B", "\u208C"], false, false),
        peg$c24 = function(o) {
                return {operator: replaceMap("₊₋₌", "+-=", o)};
            },
        peg$c25 = "\u208D",
        peg$c26 = peg$literalExpectation("\u208D", false),
        peg$c27 = "\u208E",
        peg$c28 = peg$literalExpectation("\u208E", false),
        peg$c29 = function(e) {
                return {bracketed: {open: "(", close: ")", content: e}};
            },
        peg$c30 = function(ex) {
            return {expr: ex};
        },
        peg$c31 = /^[\u207A\u207B]/,
        peg$c32 = peg$classExpectation(["\u207A", "\u207B"], false, false),
        peg$c33 = /^[\u2070\xB9\xB2\xB3\u2074\u2075\u2076\u2077\u2078\u2079]/,
        peg$c34 = peg$classExpectation(["\u2070", "\xB9", "\xB2", "\xB3", "\u2074", "\u2075", "\u2076", "\u2077", "\u2078", "\u2079"], false, false),
        peg$c35 = function(s, n) {
            var nPrime = {number: replaceMap("⁰¹²³⁴⁵⁶⁷⁸⁹", "0123456789", n)};
            if (s) {
                return [{operator: replaceMap("⁺⁻", "+-", s)}, nPrime];
            }
            return nPrime;
        },
        peg$c36 = /^[\u2071\u207F]/,
        peg$c37 = peg$classExpectation(["\u2071", "\u207F"], false, false),
        peg$c38 = function(a) {
            return {atoms: {chars: replaceMap("ⁱⁿ", "in", a)}};
        },
        peg$c39 = "\u207A\u207B",
        peg$c40 = peg$literalExpectation("\u207A\u207B", false),
        peg$c41 = "\u207B\u207A",
        peg$c42 = peg$literalExpectation("\u207B\u207A", false),
        peg$c43 = /^[\u207A\u207B\u207C]/,
        peg$c44 = peg$classExpectation(["\u207A", "\u207B", "\u207C"], false, false),
        peg$c45 = function(o) {
                return {operator: replaceMap("⁺⁻⁼", "+-=", o)};
            },
        peg$c46 = "\u207D",
        peg$c47 = peg$literalExpectation("\u207D", false),
        peg$c48 = "\u207E",
        peg$c49 = peg$literalExpectation("\u207E", false),
        peg$c50 = "",
        peg$c51 = peg$anyExpectation(),
        peg$c52 = /^[A-Za-z]/,
        peg$c53 = peg$classExpectation([["A", "Z"], ["a", "z"]], false, false),
        peg$c54 = /^[\uE000-\uE3FF\u2102-\u2131\u2133\u2134]/,
        peg$c55 = peg$classExpectation([["\uE000", "\uE3FF"], ["\u2102", "\u2131"], "\u2133", "\u2134"], false, false),
        peg$c56 = /^[\u231A-\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD-\u25FE\u2614-\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA-\u26AB\u26BD-\u26BE\u26C4-\u26C5\u26CE\u26D4\u26EA\u26F2-\u26F3\u26F5\u26FA\u26FD\u2705\u270A-\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B-\u2B1C\u2B50\u2B55\uE400-\uE808]/,
        peg$c57 = peg$classExpectation([["\u231A", "\u231B"], ["\u23E9", "\u23EC"], "\u23F0", "\u23F3", ["\u25FD", "\u25FE"], ["\u2614", "\u2615"], ["\u2648", "\u2653"], "\u267F", "\u2693", "\u26A1", ["\u26AA", "\u26AB"], ["\u26BD", "\u26BE"], ["\u26C4", "\u26C5"], "\u26CE", "\u26D4", "\u26EA", ["\u26F2", "\u26F3"], "\u26F5", "\u26FA", "\u26FD", "\u2705", ["\u270A", "\u270B"], "\u2728", "\u274C", "\u274E", ["\u2753", "\u2755"], "\u2757", ["\u2795", "\u2797"], "\u27B0", "\u27BF", ["\u2B1B", "\u2B1C"], "\u2B50", "\u2B55", ["\uE400", "\uE808"]], false, false),
        peg$c58 = /^[\u0391-\u03A9\u03B1-\u03C9]/,
        peg$c59 = peg$classExpectation([["\u0391", "\u03A9"], ["\u03B1", "\u03C9"]], false, false),
        peg$c60 = /^[\u0300-\u036F\u20D0-\u20FF]/,
        peg$c61 = peg$classExpectation([["\u0300", "\u036F"], ["\u20D0", "\u20FF"]], false, false),
        peg$c62 = /^[\u2189\xBD\u2153\u2154\xBC\xBE\u2155\u2156\u2157\u2158\u2159\u215A\u2150\u215B\u215C\u215D\u215E\u2151]/,
        peg$c63 = peg$classExpectation(["\u2189", "\xBD", "\u2153", "\u2154", "\xBC", "\xBE", "\u2155", "\u2156", "\u2157", "\u2158", "\u2159", "\u215A", "\u2150", "\u215B", "\u215C", "\u215D", "\u215E", "\u2151"], false, false),
        peg$c64 = "\u2588",
        peg$c65 = peg$literalExpectation("\u2588", false),
        peg$c66 = "\u25A0",
        peg$c67 = peg$literalExpectation("\u25A0", false),
        peg$c68 = "@",
        peg$c69 = peg$literalExpectation("@", false),
        peg$c70 = "&",
        peg$c71 = peg$literalExpectation("&", false),
        peg$c72 = /^[([{\u27E8\u3016\u2308\u230A]/,
        peg$c73 = peg$classExpectation(["(", "[", "{", "\u27E8", "\u3016", "\u2308", "\u230A"], false, false),
        peg$c74 = /^[)}\u27E9\u3017\u2309\u230B]/,
        peg$c75 = peg$classExpectation([")", "}", "\u27E9", "\u3017", "\u2309", "\u230B"], false, false),
        peg$c76 = "]",
        peg$c77 = peg$literalExpectation("]", false),
        peg$c78 = ".",
        peg$c79 = peg$literalExpectation(".", false),
        peg$c80 = ",",
        peg$c81 = peg$literalExpectation(",", false),
        peg$c82 = /^[\u23DC\u23DD\u23DE\u23DF\u23E0\u23E1\u23B4\u23B5\xAF]/,
        peg$c83 = peg$classExpectation(["\u23DC", "\u23DD", "\u23DE", "\u23DF", "\u23E0", "\u23E1", "\u23B4", "\u23B5", "\xAF"], false, false),
        peg$c84 = /^[\u2190\u2192\u2194\u21D0\u21D2\u21D4\u21A9\u21AA\u21BC\u21C0\u21BD\u21C1\u22A2\u22A3\u27F5\u27F6\u27F7\u27F8\u27F9\u27FA\u21A6\u22A8]/,
        peg$c85 = peg$classExpectation(["\u2190", "\u2192", "\u2194", "\u21D0", "\u21D2", "\u21D4", "\u21A9", "\u21AA", "\u21BC", "\u21C0", "\u21BD", "\u21C1", "\u22A2", "\u22A3", "\u27F5", "\u27F6", "\u27F7", "\u27F8", "\u27F9", "\u27FA", "\u21A6", "\u22A8"], false, false),
        peg$c86 = /^[\u2211\u2140\u2A0A\u220F\u2210\u2A0B\u222B\u222C\u222D\u2A0C\u222E\u222F\u2230\u2231\u2A11\u2232\u2233\u2A0D\u2A0E\u2A0F\u2A15\u2A16\u2A17\u2A18\u2A19\u2A1A\u2A1B\u2A1C\u2A12\u2A13\u2A14\u22C0\u22C1\u22C2\u22C3\u2A03\u2A04\u2A05\u2A06\u2A00\u2A01\u2A02\u2A09\u2AFF]/,
        peg$c87 = peg$classExpectation(["\u2211", "\u2140", "\u2A0A", "\u220F", "\u2210", "\u2A0B", "\u222B", "\u222C", "\u222D", "\u2A0C", "\u222E", "\u222F", "\u2230", "\u2231", "\u2A11", "\u2232", "\u2233", "\u2A0D", "\u2A0E", "\u2A0F", "\u2A15", "\u2A16", "\u2A17", "\u2A18", "\u2A19", "\u2A1A", "\u2A1B", "\u2A1C", "\u2A12", "\u2A13", "\u2A14", "\u22C0", "\u22C1", "\u22C2", "\u22C3", "\u2A03", "\u2A04", "\u2A05", "\u2A06", "\u2A00", "\u2A01", "\u2A02", "\u2A09", "\u2AFF"], false, false),
        peg$c88 = "\u2592",
        peg$c89 = peg$literalExpectation("\u2592", false),
        peg$c90 = /^[\u2145\u2146\u2147\u2148\u2149]/,
        peg$c91 = peg$classExpectation(["\u2145", "\u2146", "\u2147", "\u2148", "\u2149"], false, false),
        peg$c92 = "\xA6",
        peg$c93 = peg$literalExpectation("\xA6", false),
        peg$c94 = "\u249E",
        peg$c95 = peg$literalExpectation("\u249E", false),
        peg$c96 = "/",
        peg$c97 = peg$literalExpectation("/", false),
        peg$c98 = "\u2044",
        peg$c99 = peg$literalExpectation("\u2044", false),
        peg$c100 = "\u2215",
        peg$c101 = peg$literalExpectation("\u2215", false),
        peg$c102 = "\u2298",
        peg$c103 = peg$literalExpectation("\u2298", false),
        peg$c104 = "\u25AD",
        peg$c105 = peg$literalExpectation("\u25AD", false),
        peg$c106 = "\u0304",
        peg$c107 = peg$literalExpectation("\u0304", false),
        peg$c108 = "\u2581",
        peg$c109 = peg$literalExpectation("\u2581", false),
        peg$c110 = "\u25A2",
        peg$c111 = peg$literalExpectation("\u25A2", false),
        peg$c112 = "\u25CB",
        peg$c113 = peg$literalExpectation("\u25CB", false),
        peg$c114 = "\u27CC",
        peg$c115 = peg$literalExpectation("\u27CC", false),
        peg$c116 = "\u20E7",
        peg$c117 = peg$literalExpectation("\u20E7", false),
        peg$c118 = "\u2B2D",
        peg$c119 = peg$literalExpectation("\u2B2D", false),
        peg$c120 = "#",
        peg$c121 = peg$literalExpectation("#", false),
        peg$c122 = "\u27E1",
        peg$c123 = peg$literalExpectation("\u27E1", false),
        peg$c124 = "\u2B04",
        peg$c125 = peg$literalExpectation("\u2B04", false),
        peg$c126 = "\u21F3",
        peg$c127 = peg$literalExpectation("\u21F3", false),
        peg$c128 = "\u2B0D",
        peg$c129 = peg$literalExpectation("\u2B0D", false),
        peg$c130 = "\u2B06",
        peg$c131 = peg$literalExpectation("\u2B06", false),
        peg$c132 = "\u2B07",
        peg$c133 = peg$literalExpectation("\u2B07", false),
        peg$c134 = "\u2B0C",
        peg$c135 = peg$literalExpectation("\u2B0C", false),
        peg$c136 = "\u25A1",
        peg$c137 = peg$literalExpectation("\u25A1", false),
        peg$c138 = "\u221A",
        peg$c139 = peg$literalExpectation("\u221A", false),
        peg$c140 = "\u221B",
        peg$c141 = peg$literalExpectation("\u221B", false),
        peg$c142 = "\u221C",
        peg$c143 = peg$literalExpectation("\u221C", false),
        peg$c144 = "_",
        peg$c145 = peg$literalExpectation("_", false),
        peg$c146 = "^",
        peg$c147 = peg$literalExpectation("^", false),
        peg$c148 = "\u252C",
        peg$c149 = peg$literalExpectation("\u252C", false),
        peg$c150 = "\u2534",
        peg$c151 = peg$literalExpectation("\u2534", false),
        peg$c152 = "\u2132",
        peg$c153 = peg$literalExpectation("\u2132", false),
        peg$c154 = "\u270E",
        peg$c155 = peg$literalExpectation("\u270E", false),
        peg$c156 = "\u2601",
        peg$c157 = peg$literalExpectation("\u2601", false),
        peg$c158 = "\u2AF7",
        peg$c159 = peg$literalExpectation("\u2AF7", false),
        peg$c160 = "\u2AF8",
        peg$c161 = peg$literalExpectation("\u2AF8", false),
        peg$c162 = "\uFFD7",
        peg$c163 = peg$literalExpectation("\uFFD7", false),
        peg$c164 = /^[\u2588\u25A0@&([{\u27E8\u3016\u2308\u230A\u251C)}\u27E9\u3017\u2309\u230B\u2524|\u2502\u2223\u23DC\u23DD\u23DE\u23DF\u23E0\u23E1\u23B4\u23B5\xAF\u2211\u2140\u2A0A\u220F\u2210\u2A0B\u222B\u222C\u222D\u2A0C\u222E\u222F\u2230\u2231\u2A11\u2232\u2233\u2A0D\u2A0E\u2A0F\u2A15\u2A16\u2A17\u2A18\u2A19\u2A1A\u2A1B\u2A1C\u2A12\u2A13\u2A14\u22C0\u22C1\u22C2\u22C3\u2A03\u2A04\u2A05\u2A06\u2A00\u2A01\u2A02\u2A09\u2AFF\u2592\u2145\u2146\u2147\u2148\u2149\xA6\u249E\/\u2044\u2215\u2298\u25AD\u0304\u2581\u25A2\u25CB\u27CC\u20E7\u2B2D#\u27E1\u2B04\u21F3\u2B0D\u2B06\u2B07\u2B0C\u25A1\u221A\u221B\u221C_\^\u252C\u2534\u2132\u270E\u2601\u2AF7\u2AF8\uFFD7]/,
        peg$c165 = peg$classExpectation(["\u2588", "\u25A0", "@", "&", "(", "[", "{", "\u27E8", "\u3016", "\u2308", "\u230A", "\u251C", ")", "}", "\u27E9", "\u3017", "\u2309", "\u230B", "\u2524", "|", "\u2502", "\u2223", "\u23DC", "\u23DD", "\u23DE", "\u23DF", "\u23E0", "\u23E1", "\u23B4", "\u23B5", "\xAF", "\u2211", "\u2140", "\u2A0A", "\u220F", "\u2210", "\u2A0B", "\u222B", "\u222C", "\u222D", "\u2A0C", "\u222E", "\u222F", "\u2230", "\u2231", "\u2A11", "\u2232", "\u2233", "\u2A0D", "\u2A0E", "\u2A0F", "\u2A15", "\u2A16", "\u2A17", "\u2A18", "\u2A19", "\u2A1A", "\u2A1B", "\u2A1C", "\u2A12", "\u2A13", "\u2A14", "\u22C0", "\u22C1", "\u22C2", "\u22C3", "\u2A03", "\u2A04", "\u2A05", "\u2A06", "\u2A00", "\u2A01", "\u2A02", "\u2A09", "\u2AFF", "\u2592", "\u2145", "\u2146", "\u2147", "\u2148", "\u2149", "\xA6", "\u249E", "/", "\u2044", "\u2215", "\u2298", "\u25AD", "\u0304", "\u2581", "\u25A2", "\u25CB", "\u27CC", "\u20E7", "\u2B2D", "#", "\u27E1", "\u2B04", "\u21F3", "\u2B0D", "\u2B06", "\u2B07", "\u2B0C", "\u25A1", "\u221A", "\u221B", "\u221C", "_", "^", "\u252C", "\u2534", "\u2132", "\u270E", "\u2601", "\u2AF7", "\u2AF8", "\uFFD7"], false, false),
        peg$c166 = function(ex) {
            return {expr: ex.map(e => e[0])};
        },
        peg$c167 = function(s) {  // spaces
                return s
            },
        peg$c168 = ",  ",
        peg$c169 = peg$literalExpectation(",  ", false),
        peg$c170 = function() {  // tech note, section 3.14: "If two spaces follow, the comma is
                       // rendered as a clause separator (a relatively large space
                       // follows the comma)."
                return [{operator: ","}, {spaces: {space: 9}}];
            },
        peg$c171 = " :",
        peg$c172 = peg$literalExpectation(" :", false),
        peg$c173 = function() {  // tech note, section 3.14: "<space> ‘:’ is displayed as Unicode
                      // RATIO U+2236."
                return {operator: "\u2236"};
            },
        peg$c174 = function(e) {  // scripted opers
                return e;
            },
        peg$c175 = function(o) {
                return {operator: o};
            },
        peg$c176 = "\u0338",
        peg$c177 = peg$literalExpectation("\u0338", false),
        peg$c178 = function(o) {  // negated operators
                return {negatedoperator: o};
            },
        peg$c179 = function(o) {
                return o[1];
            },
        peg$c180 = "*",
        peg$c181 = peg$literalExpectation("*", false),
        peg$c182 = function() {return "\u2217"},
        peg$c183 = "-+",
        peg$c184 = peg$literalExpectation("-+", false),
        peg$c185 = function() {return "\u2213"},
        peg$c186 = "-",
        peg$c187 = peg$literalExpectation("-", false),
        peg$c188 = function() {return "\u2212"},
        peg$c189 = "+-",
        peg$c190 = peg$literalExpectation("+-", false),
        peg$c191 = function() {return "\u00B1"},
        peg$c192 = "<=",
        peg$c193 = peg$literalExpectation("<=", false),
        peg$c194 = function() {return "\u2264"},
        peg$c195 = ">=",
        peg$c196 = peg$literalExpectation(">=", false),
        peg$c197 = function() {return "\u2265"},
        peg$c198 = "~=",
        peg$c199 = peg$literalExpectation("~=", false),
        peg$c200 = function() {return "\u2245"},
        peg$c201 = "::",
        peg$c202 = peg$literalExpectation("::", false),
        peg$c203 = function() {return "\u2237"},
        peg$c204 = ":=",
        peg$c205 = peg$literalExpectation(":=", false),
        peg$c206 = function() {return "\u2254"},
        peg$c207 = "<<",
        peg$c208 = peg$literalExpectation("<<", false),
        peg$c209 = function() {return "\u226A"},
        peg$c210 = ">>",
        peg$c211 = peg$literalExpectation(">>", false),
        peg$c212 = function() {return "\u226B"},
        peg$c213 = "->",
        peg$c214 = peg$literalExpectation("->", false),
        peg$c215 = function() {return "\u2192"},
        peg$c216 = "!!",
        peg$c217 = peg$literalExpectation("!!", false),
        peg$c218 = function() {return "\u203C"},
        peg$c219 = "...",
        peg$c220 = peg$literalExpectation("...", false),
        peg$c221 = function() {return "…"},
        peg$c222 = function(o) {return o},
        peg$c223 = "\u2588(",
        peg$c224 = peg$literalExpectation("\u2588(", false),
        peg$c225 = ")",
        peg$c226 = peg$literalExpectation(")", false),
        peg$c227 = function(r) {
            return {array: r};
        },
        peg$c228 = function(h, t) {
            return {arows: [h].concat(t.map(a => a[1]))};
        },
        peg$c229 = function(h, t) {
            return {arow: [h].concat(t.map(a => a[3]))};
        },
        peg$c230 = "\u25A0(",
        peg$c231 = peg$literalExpectation("\u25A0(", false),
        peg$c232 = function(r) {
                return {matrix: r};
            },
        peg$c233 = "\u24A8(",
        peg$c234 = peg$literalExpectation("\u24A8(", false),
        peg$c235 = function(r) {
                return {bracketed: {open: "(", close: ")", content: {matrix: r}}};
            },
        peg$c236 = function(h, t) {
            return {mrows: [h].concat(t.map(a => a[1]))};
        },
        peg$c237 = function(h, t) {
            return {mrow: [h].concat(t.map(a => a[3]))};
        },
        peg$c238 = function(o, m, s, a) {
            if (s == null) {
                s = {type: "subsup"}
            }
            s.base = {opnary: o};
            return {nary: {mask: m, limits: {script: s}, naryand: a}};
        },
        peg$c239 = "\u27E1(",
        peg$c240 = peg$literalExpectation("\u27E1(", false),
        peg$c241 = function(m, e) {
                return {phantom: {mask: m, symbol: null, of: e}};
            },
        peg$c242 = "(",
        peg$c243 = peg$literalExpectation("(", false),
        peg$c244 = function(s, e) {
                return {phantom: {mask: null, symbol: s, of: e}};
            },
        peg$c245 = function(s, e) {
            return {smash: {symbol: s, of: e}};
        },
        peg$c246 = function(f) {  // not mentioned in the tech note, but should clearly
                                   // be syntactic sugar for the corresponding "proper"
                                   // fractions, via unicodefractions.com
                return {unicodefraction: f};
            },
        peg$c247 = function(r, t) {
                return nestRight2("fraction", r.map(a => [a[0], a[2]]).concat([t]));
            },
        peg$c248 = function(r, t) {
                return nestRight("atop", r.map(a => a[0]).concat([t]));
            },
        peg$c249 = function(r, t) {  // syntactic sugar for binomial
                                                      // coefficients
                return {binom: {top: r, bottom: t}};
            },
        peg$c250 = "'",
        peg$c251 = peg$literalExpectation("'", false),
        peg$c252 = "\u2032",
        peg$c253 = peg$literalExpectation("\u2032", false),
        peg$c254 = "\u2033",
        peg$c255 = peg$literalExpectation("\u2033", false),
        peg$c256 = "\u2034",
        peg$c257 = peg$literalExpectation("\u2034", false),
        peg$c258 = "\u2057",
        peg$c259 = peg$literalExpectation("\u2057", false),
        peg$c260 = "\u203C",
        peg$c261 = peg$literalExpectation("\u203C", false),
        peg$c262 = "!",
        peg$c263 = peg$literalExpectation("!", false),
        peg$c264 = /^[\u2080\u2081\u2082\u2083\u2084\u2085\u2086\u2087\u2088\u2089\u208A\u208B\u208C\u208D\u208E\u2070\xB9\xB2\xB3\u2074\u2075\u2076\u2077\u2078\u2079\u2071\u207F\u207A\u207B\u207C\u207D\u207E]/,
        peg$c265 = peg$classExpectation(["\u2080", "\u2081", "\u2082", "\u2083", "\u2084", "\u2085", "\u2086", "\u2087", "\u2088", "\u2089", "\u208A", "\u208B", "\u208C", "\u208D", "\u208E", "\u2070", "\xB9", "\xB2", "\xB3", "\u2074", "\u2075", "\u2076", "\u2077", "\u2078", "\u2079", "\u2071", "\u207F", "\u207A", "\u207B", "\u207C", "\u207D", "\u207E"], false, false),
        peg$c266 = function(e) {return e},
        peg$c267 = function(s) {
            s.type = "subsup";
            return s;
        },
        peg$c268 = function(o, s) {
            s.base = o;
            s.type = "subsup";
            return {script: s};
        },
        peg$c269 = function(b, p) {
                return {low: b.low, high: p.high};
            },
        peg$c270 = function(p, b) {
                return {low: b.low, high: p.high};
            },
        peg$c271 = function(b) {
                return {low: b};
            },
        peg$c272 = function(b) {  // allow nested subscripts
                var prevLow = b[0][1];
                for (let x of b.slice(1)) {
                    prevLow = {script: {type: "subsup", base: prevLow, low: x[1]}};
                }
                return {low: prevLow};
            },
        peg$c273 = function(p) {
                return {high: p};
            },
        peg$c274 = function(p) {  // allow nested subscripts
                var prevHigh = p[0][1];
                for (let x of p.slice(1)) {
                    prevHigh = {script: {type: "subsup", base: prevHigh, high: x[1]}};
                }
                return {high: prevHigh};
            },
        peg$c275 = function(s, o) {
                s.base = o;
                s.type = "pre";
                if (s.hasOwnProperty("low")) {
                    s.prelow = s.low;
                    delete s.low;
                }
                if (s.hasOwnProperty("high")) {
                    s.prehigh = s.high;
                    delete s.high;
                }
                return {script: s};
            },
        peg$c276 = function(s, o) {  // Unicode scripts require no space between
                                     // prescript and base
                s.base = o;
                s.type = "pre";
                if (s.hasOwnProperty("low")) {
                    s.prelow = s.low;
                    delete s.low;
                }
                if (s.hasOwnProperty("high")) {
                    s.prehigh = s.high;
                    delete s.high;
                }
                return {script: s};
            },
        peg$c277 = function(s, o) {  // mixed or LaTeX-style-only scripts *do* require
                                      // a space between prescript and base (in fact, if
                                      // the second script of a subsup were a Unicode
                                      // script, no space would be strictly required –
                                      // but that'd be a mess to integrate into the
                                      // grammar)
                s.base = o;
                s.type = "pre";
                if (s.hasOwnProperty("low")) {
                    s.prelow = s.low;
                    delete s.low;
                }
                if (s.hasOwnProperty("high")) {
                    s.prehigh = s.high;
                    delete s.high;
                }
                return {script: s};
            },
        peg$c278 = function(s) {
            s.type = "abovebelow";
            return s;
        },
        peg$c279 = function(o, s) {
            s.base = o;
            s.type = "abovebelow";
            return {script: s};
        },
        peg$c280 = function(b, p) {
                return {low: b, high: p};
            },
        peg$c281 = function(p, b) {
                return {low: b, high: p};
            },
        peg$c282 = function(p) {
            return {high: p};
        },
        peg$c283 = function(b) {
            return {low: b};
        },
        peg$c284 = "|",
        peg$c285 = peg$literalExpectation("|", false),
        peg$c286 = function() {  // enable using pipe symbol as scriptbase
                return {atoms: {chars: "|"}};
            },
        peg$c287 = function(o, e) {  // for e.g. ∫_-∞^∞
                return [o, e];
            },
        peg$c288 = function(o) {  // for e.g. ℕ^+
                return o;
            },
        peg$c289 = function(o, s) {  // this could be called subsupSubsupU, but
                                        // without potential trailing spaces
                s.base = o;
                return {script: s};
            },
        peg$c290 = "\u221E",
        peg$c291 = peg$literalExpectation("\u221E", false),
        peg$c292 = function() {  // for correct spacing of e.g. ∫_-∞^∞
                return {atoms: {chars: "∞"}};
            },
        peg$c293 = "\u25AD(",
        peg$c294 = peg$literalExpectation("\u25AD(", false),
        peg$c295 = function(m, o) {
                return {enclosed: {mask: m, symbol: null, of: o}};
            },
        peg$c296 = function(e, o) {  // ⚡ performance optimization
                return {enclosed: {mask: null, symbol: e, of: o}};
            },
        peg$c297 = function(e, o) {
                return {enclosed: {mask: null, symbol: e, of: o}};
            },
        peg$c298 = function(m, o) {
            return {abstractbox: {mask: m, of: o}};
        },
        peg$c299 = function(b, o) {
            return {hbrack: {bracket: b, of: o}};
        },
        peg$c300 = "\u221A(",
        peg$c301 = peg$literalExpectation("\u221A(", false),
        peg$c302 = function(d, o) {  // *can* use exp here due to the presence
                                              // of a closing backet (could use it for
                                              // the other roots as well if PEG.js could
                                              // be switched into a less greedy mode)
                return {root: {degree: d, of: o}};
            },
        peg$c303 = function(d, o) {  // alternate notation, e.g. √a+b▒c
                return {root: {degree: d, of: o}};
            },
        peg$c304 = function(o) {
                return {sqrt: o};  // could return {root: {degree: null, of: o}} here,
                                   // but treating this as a special case allows
                                   // emitting the more semantically meaningful <msqrt>
                                   // tag
            },
        peg$c305 = function(o) {
                return {root: {degree: {number: "3"}, of: o}};
            },
        peg$c306 = function(o) {
                return {root: {degree: {number: "4"}, of: o}};
            },
        peg$c307 = "\u2061",
        peg$c308 = peg$literalExpectation("\u2061", false),
        peg$c309 = function(f, s, o) {
                if (s != null) {
                    s.base = {atoms: {chars: f}};
                    return {function: {f: {script: s}, of: o}};
                } else {
                    return {function: {f: {atoms: {chars: f}}, of: o}};
                }
            },
        peg$c310 = function(f, o) {
                return {function: {f: {atoms: {chars: f}}, of: o}};
            },
        peg$c311 = "sin",
        peg$c312 = peg$literalExpectation("sin", false),
        peg$c313 = "sec",
        peg$c314 = peg$literalExpectation("sec", false),
        peg$c315 = "asin",
        peg$c316 = peg$literalExpectation("asin", false),
        peg$c317 = "asec",
        peg$c318 = peg$literalExpectation("asec", false),
        peg$c319 = "arcsin",
        peg$c320 = peg$literalExpectation("arcsin", false),
        peg$c321 = "arcsec",
        peg$c322 = peg$literalExpectation("arcsec", false),
        peg$c323 = "sinh",
        peg$c324 = peg$literalExpectation("sinh", false),
        peg$c325 = "sech",
        peg$c326 = peg$literalExpectation("sech", false),
        peg$c327 = "asinh",
        peg$c328 = peg$literalExpectation("asinh", false),
        peg$c329 = "asech",
        peg$c330 = peg$literalExpectation("asech", false),
        peg$c331 = "arcsinh",
        peg$c332 = peg$literalExpectation("arcsinh", false),
        peg$c333 = "arcsech",
        peg$c334 = peg$literalExpectation("arcsech", false),
        peg$c335 = "cos",
        peg$c336 = peg$literalExpectation("cos", false),
        peg$c337 = "csc",
        peg$c338 = peg$literalExpectation("csc", false),
        peg$c339 = "acos",
        peg$c340 = peg$literalExpectation("acos", false),
        peg$c341 = "acsc",
        peg$c342 = peg$literalExpectation("acsc", false),
        peg$c343 = "arccos",
        peg$c344 = peg$literalExpectation("arccos", false),
        peg$c345 = "arccsc",
        peg$c346 = peg$literalExpectation("arccsc", false),
        peg$c347 = "cosh",
        peg$c348 = peg$literalExpectation("cosh", false),
        peg$c349 = "csch",
        peg$c350 = peg$literalExpectation("csch", false),
        peg$c351 = "acosh",
        peg$c352 = peg$literalExpectation("acosh", false),
        peg$c353 = "acsch",
        peg$c354 = peg$literalExpectation("acsch", false),
        peg$c355 = "arccosh",
        peg$c356 = peg$literalExpectation("arccosh", false),
        peg$c357 = "arccsch",
        peg$c358 = peg$literalExpectation("arccsch", false),
        peg$c359 = "tan",
        peg$c360 = peg$literalExpectation("tan", false),
        peg$c361 = "cot",
        peg$c362 = peg$literalExpectation("cot", false),
        peg$c363 = "atan",
        peg$c364 = peg$literalExpectation("atan", false),
        peg$c365 = "acot",
        peg$c366 = peg$literalExpectation("acot", false),
        peg$c367 = "arctan",
        peg$c368 = peg$literalExpectation("arctan", false),
        peg$c369 = "arccot",
        peg$c370 = peg$literalExpectation("arccot", false),
        peg$c371 = "tanh",
        peg$c372 = peg$literalExpectation("tanh", false),
        peg$c373 = "coth",
        peg$c374 = peg$literalExpectation("coth", false),
        peg$c375 = "atanh",
        peg$c376 = peg$literalExpectation("atanh", false),
        peg$c377 = "acoth",
        peg$c378 = peg$literalExpectation("acoth", false),
        peg$c379 = "arctanh",
        peg$c380 = peg$literalExpectation("arctanh", false),
        peg$c381 = "arccoth",
        peg$c382 = peg$literalExpectation("arccoth", false),
        peg$c383 = "arg",
        peg$c384 = peg$literalExpectation("arg", false),
        peg$c385 = "det",
        peg$c386 = peg$literalExpectation("det", false),
        peg$c387 = "exp",
        peg$c388 = peg$literalExpectation("exp", false),
        peg$c389 = "lim",
        peg$c390 = peg$literalExpectation("lim", false),
        peg$c391 = "def",
        peg$c392 = peg$literalExpectation("def", false),
        peg$c393 = "dim",
        peg$c394 = peg$literalExpectation("dim", false),
        peg$c395 = "gcd",
        peg$c396 = peg$literalExpectation("gcd", false),
        peg$c397 = "ker",
        peg$c398 = peg$literalExpectation("ker", false),
        peg$c399 = "Pr",
        peg$c400 = peg$literalExpectation("Pr", false),
        peg$c401 = "deg",
        peg$c402 = peg$literalExpectation("deg", false),
        peg$c403 = "erf",
        peg$c404 = peg$literalExpectation("erf", false),
        peg$c405 = "hom",
        peg$c406 = peg$literalExpectation("hom", false),
        peg$c407 = "log",
        peg$c408 = peg$literalExpectation("log", false),
        peg$c409 = "lg",
        peg$c410 = peg$literalExpectation("lg", false),
        peg$c411 = "ln",
        peg$c412 = peg$literalExpectation("ln", false),
        peg$c413 = "min",
        peg$c414 = peg$literalExpectation("min", false),
        peg$c415 = "max",
        peg$c416 = peg$literalExpectation("max", false),
        peg$c417 = "inf",
        peg$c418 = peg$literalExpectation("inf", false),
        peg$c419 = "sup",
        peg$c420 = peg$literalExpectation("sup", false),
        peg$c421 = "mod",
        peg$c422 = peg$literalExpectation("mod", false),
        peg$c423 = "lcm",
        peg$c424 = peg$literalExpectation("lcm", false),
        peg$c425 = "lub",
        peg$c426 = peg$literalExpectation("lub", false),
        peg$c427 = "glb",
        peg$c428 = peg$literalExpectation("glb", false),
        peg$c429 = "lim\xA0inf",
        peg$c430 = peg$literalExpectation("lim\xA0inf", false),
        peg$c431 = "lim\xA0sup",
        peg$c432 = peg$literalExpectation("lim\xA0sup", false),
        peg$c433 = "\"",
        peg$c434 = peg$literalExpectation("\"", false),
        peg$c435 = "\\\"",
        peg$c436 = peg$literalExpectation("\\\"", false),
        peg$c437 = function(c) {  // see sec. 3.15
            return {text: c.map(v => v[1]).join("")};
        },
        peg$c438 = /^[A-D]/,
        peg$c439 = peg$classExpectation([["A", "D"]], false, false),
        peg$c440 = function(s, o) {
            return {sizeoverride: {size: s, of: o}};
        },
        peg$c441 = function(c, o) {
                return {colored: {color: c, of: o}};
            },
        peg$c442 = function(c, o) {
                return {bgcolored: {color: c, of: o}};
            },
        peg$c443 = function(co) {  // colors can be anything – it's up to the mathml
                                   // renderer to interpret these
            return co.map(c => c[1]).join('');
        },
        peg$c444 = "\\",
        peg$c445 = peg$literalExpectation("\\", false),
        peg$c446 = function(c) {
            return {comment: c.map(v => v[1]).join("")};
        },
        peg$c447 = "\\)",
        peg$c448 = peg$literalExpectation("\\)", false),
        peg$c449 = function(t) {
                return {tt: t.map(v => v[1]).join("")};
            },
        peg$c450 = function(e, p) {
            return {primed: {base: e, primes: p.reduce((a, b) => a + b, 0)}}
        },
        peg$c451 = function(o) {
                return {opnary: o};
            },
        peg$c452 = function() {
                return 1;  // for later conversion into one or more Unicode primes
            },
        peg$c453 = function() {
                return 2;
            },
        peg$c454 = function() {
                return 3;
            },
        peg$c455 = function() {
                return 4;
            },
        peg$c456 = function(e) {
                return {factorial: {factorial: e}};
            },
        peg$c457 = function(e) {
                return {factorial: e};
            },
        peg$c458 = "\xA0",
        peg$c459 = peg$literalExpectation("\xA0", false),
        peg$c460 = function(as) {
            function k(obj) {
                return Object.keys(obj)[0];
            }
            function v(obj) {
                return Object.values(obj)[0];
            }

            // group successive characters into one "chars" node. this is made a bit
            // complicated by the presence of diacriticized terms, which are
            // interspersed with these "groupable" nodes
            var atoms = [];
            var curChars = "";
            for (var a of as) {
                if (k(a) == "char") {
                    curChars += v(a);
                } else {
                    if (curChars != "") {
                        atoms.push({chars: curChars});
                        curChars = ""
                    }
                    atoms.push(a);
                }
            }
            if (curChars != "") {
                atoms.push({chars: curChars});
            }

            return {atoms: atoms};
        },
        peg$c461 = function(c) {  // "literal"/escape operator
                return {operator: c};
            },
        peg$c462 = function(c) {
                return {char: c};
            },
        peg$c463 = function(b, d) {
            return {diacriticized: {base: b, diacritics: d}};
        },
        peg$c464 = function(c) {
                return {chars: c};
            },
        peg$c465 = function(n) {
                return {number: n};
            },
        peg$c466 = function(e) {  // optional non-breaking space to visually
                                         // decouple diacritic from closing bracket in
                                         // plaintext
                return e;
            },
        peg$c467 = function(d) {
            return d;
        },
        peg$c468 = function(s) {
            return {spaces: s};
        },
        peg$c469 = "\u200B",
        peg$c470 = peg$literalExpectation("\u200B", false),
        peg$c471 = function() {
                return {space: 0};  // 0/18 em
            },
        peg$c472 = "\u200A",
        peg$c473 = peg$literalExpectation("\u200A", false),
        peg$c474 = function() {
                return {space: 1};
            },
        peg$c475 = function() {
                return {space: 2};
            },
        peg$c476 = "\u2009",
        peg$c477 = peg$literalExpectation("\u2009", false),
        peg$c478 = function() {
                return {space: 3};
            },
        peg$c479 = "\u205F",
        peg$c480 = peg$literalExpectation("\u205F", false),
        peg$c481 = function() {
                return {space: 4};
            },
        peg$c482 = "\u2005",
        peg$c483 = peg$literalExpectation("\u2005", false),
        peg$c484 = function() {
                return {space: 5};
            },
        peg$c485 = "\u2004",
        peg$c486 = peg$literalExpectation("\u2004", false),
        peg$c487 = function() {
                return {space: 6};
            },
        peg$c488 = function() {
                return {space: 7};
            },
        peg$c489 = "\u2002",
        peg$c490 = peg$literalExpectation("\u2002", false),
        peg$c491 = function() {
                return {space: 9};
            },
        peg$c492 = "\u2003",
        peg$c493 = peg$literalExpectation("\u2003", false),
        peg$c494 = function() {
                return {space: 18};
            },
        peg$c495 = "\u2007",
        peg$c496 = peg$literalExpectation("\u2007", false),
        peg$c497 = function() {
                return {space: "digit"};
            },
        peg$c498 = function() {
                return {space: "space"};
            },
        peg$c499 = function(o, b) {
                return {number: o + b};
            },
        peg$c500 = function(a, o, b) {
                return {number: a + o + b};
            },
        peg$c501 = function(a) {
                return {number: a};
            },
        peg$c502 = function(n) {
            return n.join('');
        },
        peg$c503 = function(d) {
            return {doublestruck: d};
        },
        peg$c504 = function() {

                // better error message than PEG.js would emit, also removes long
                // blocking (which stems almost entirely from PEG.js's error message
                // assembly) when parens are not matched in some situations
                error("Non-matching brackets present or error within brackets")
            },
        peg$c505 = "||",
        peg$c506 = peg$literalExpectation("||", false),
        peg$c507 = "\u2016",
        peg$c508 = peg$literalExpectation("\u2016", false),
        peg$c509 = function(e) {
                return {bracketed: {open: "‖", close: "‖", content: e}};
            },
        peg$c510 = function(e) {
                return {bracketed: {open: "|", close: "|", content: e}};
            },
        peg$c511 = function(e, cl) {  // not explicitly mentioned in the
                                                   // tech note, but enables
                                                   // 𝜌 = ∑_𝜓▒P_𝜓 |𝜓⟩⟨𝜓| + 1
                return {bracketed: {open: "|", close: cl, content: e}};
            },
        peg$c512 = function(op, cl) {  // empty bracket pairs
                return {bracketed: {open: op, close: cl, content: {atoms: {spaces: {space: 0}}}}};
            },
        peg$c513 = function(op, e, cl) {
                return {bracketed: {open: op, close: cl, content: e}};
            },
        peg$c514 = "\xA9(",
        peg$c515 = peg$literalExpectation("\xA9(", false),
        peg$c516 = function(r) {  // cases
                return {bracketed: {open: "{", close: "", content: {array: r}}};  // }
            },
        peg$c517 = "\u3016",
        peg$c518 = peg$literalExpectation("\u3016", false),
        peg$c519 = function() {
                return "";
            },
        peg$c520 = function(op) {
                return op;
            },
        peg$c521 = "\u251C",
        peg$c522 = peg$literalExpectation("\u251C", false),
        peg$c523 = function(m, op) {
                return {bracket: op, size: m};
            },
        peg$c524 = "\u3017",
        peg$c525 = peg$literalExpectation("\u3017", false),
        peg$c526 = function(cl) {
                return cl;
            },
        peg$c527 = "| ",
        peg$c528 = peg$literalExpectation("| ", false),
        peg$c529 = function() {  // followed by space, to support bra vectors in dirac notation
                return "|";
            },
        peg$c530 = "|| ",
        peg$c531 = peg$literalExpectation("|| ", false),
        peg$c532 = "\u2016 ",
        peg$c533 = peg$literalExpectation("\u2016 ", false),
        peg$c534 = function() {  // to support bra vectors in dirac notation
                return "‖";
            },
        peg$c535 = "\u2524",
        peg$c536 = peg$literalExpectation("\u2524", false),
        peg$c537 = function(m, cl) {
                return {bracket: cl, size: m};
            },
        peg$c538 = "\u2502",
        peg$c539 = peg$literalExpectation("\u2502", false),
        peg$c540 = "\u2223",
        peg$c541 = peg$literalExpectation("\u2223", false),
        peg$c542 = function(r, t) {  // U+2502
                return {separated: {separator: "│", of: r.map(a => a[0]).concat([t])}};
            },
        peg$c543 = function(r, t) {  // U+2223
                return {separated: {separator: "∣", of: r.map(a => a[0]).concat([t])}};
            },

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$resultsCache = {},

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parseunicodemath() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 135 + 0,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 10) {
        s2 = peg$c0;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1); }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (input.charCodeAt(peg$currPos) === 10) {
          s2 = peg$c0;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseexp();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsenewlines();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseexp();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsenewlines();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseeqnumber();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            if (input.charCodeAt(peg$currPos) === 10) {
              s5 = peg$c0;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c1); }
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (input.charCodeAt(peg$currPos) === 10) {
                s5 = peg$c0;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c1); }
              }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c2(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsenewlines() {
      var s0, s1, s2;

      var key    = peg$currPos * 135 + 1,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 10) {
        s2 = peg$c0;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1); }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (input.charCodeAt(peg$currPos) === 10) {
          s2 = peg$c0;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c3(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseeqnumber() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 135 + 2,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseopEqNumber();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 10) {
          s5 = peg$c0;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsechar();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 10) {
              s5 = peg$c0;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c1); }
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = void 0;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsechar();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c4(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsebitmask() {
      var s0, s1, s2;

      var key    = peg$currPos * 135 + 3,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      if (peg$c5.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c5.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c7(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parse_() {
      var s0;

      var key    = peg$currPos * 135 + 4,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 32) {
        s0 = peg$c8;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c9); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parse__() {
      var s0, s1, s2;

      var key    = peg$currPos * 135 + 5,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parse_();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c10(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsenUnicodeSub() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 135 + 6,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (peg$c11.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c13.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c14); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c13.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c15(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseopUnicodeSub() {
      var s0, s1;

      var key    = peg$currPos * 135 + 7,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c16) {
        s1 = peg$c16;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c17); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c18(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c19) {
          s1 = peg$c19;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c20); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c21(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (peg$c22.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c23); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c24(s1);
          }
          s0 = s1;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsefactorUnicodeSub() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 135 + 8,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$parsenUnicodeSub();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 8333) {
          s1 = peg$c25;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c26); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseunicodeSub();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 8334) {
              s3 = peg$c27;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c28); }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c29(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseelementUnicodeSub() {
      var s0, s1;

      var key    = peg$currPos * 135 + 9,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = [];
      s1 = peg$parsefactorUnicodeSub();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parsefactorUnicodeSub();
        }
      } else {
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseunicodeSub() {
      var s0, s1, s2;

      var key    = peg$currPos * 135 + 10,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseelementUnicodeSub();
      if (s2 === peg$FAILED) {
        s2 = peg$parseopUnicodeSub();
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseelementUnicodeSub();
          if (s2 === peg$FAILED) {
            s2 = peg$parseopUnicodeSub();
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c30(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsenUnicodeSup() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 135 + 11,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (peg$c31.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c32); }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c33.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c34); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c33.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c34); }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c35(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseatomsUnicodeSup() {
      var s0, s1, s2;

      var key    = peg$currPos * 135 + 12,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      if (peg$c36.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c37); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c36.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c37); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c38(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseopUnicodeSup() {
      var s0, s1;

      var key    = peg$currPos * 135 + 13,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c39) {
        s1 = peg$c39;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c40); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c18(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c41) {
          s1 = peg$c41;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c42); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c21(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (peg$c43.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c44); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c45(s1);
          }
          s0 = s1;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsefactorUnicodeSup() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 135 + 14,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$parseatomsUnicodeSup();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenUnicodeSup();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 8317) {
            s1 = peg$c46;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c47); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseunicodeSup();
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 8318) {
                s3 = peg$c48;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c49); }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseelementUnicodeSup() {
      var s0, s1;

      var key    = peg$currPos * 135 + 15,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = [];
      s1 = peg$parsefactorUnicodeSup();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parsefactorUnicodeSup();
        }
      } else {
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseunicodeSup() {
      var s0, s1, s2;

      var key    = peg$currPos * 135 + 16,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseelementUnicodeSup();
      if (s2 === peg$FAILED) {
        s2 = peg$parseopUnicodeSup();
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseelementUnicodeSup();
          if (s2 === peg$FAILED) {
            s2 = peg$parseopUnicodeSup();
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c30(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseε() {
      var s0;

      var key    = peg$currPos * 135 + 17,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$c50;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsechar() {
      var s0;

      var key    = peg$currPos * 135 + 18,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (input.length > peg$currPos) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c51); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsenASCII() {
      var s0;

      var key    = peg$currPos * 135 + 19,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (peg$c5.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseαASCII() {
      var s0;

      var key    = peg$currPos * 135 + 20,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (peg$c52.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c53); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseαnMath() {
      var s0;

      var key    = peg$currPos * 135 + 21,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (peg$c54.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c55); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseemoji() {
      var s0;

      var key    = peg$currPos * 135 + 22,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (peg$c56.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c57); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseαnOther() {
      var s0;

      var key    = peg$currPos * 135 + 23,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$parseαASCII();
      if (s0 === peg$FAILED) {
        if (peg$c58.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c59); }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseαn() {
      var s0;

      var key    = peg$currPos * 135 + 24,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$parseαnMath();
      if (s0 === peg$FAILED) {
        s0 = peg$parseαnOther();
        if (s0 === peg$FAILED) {
          s0 = peg$parseemoji();
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsediacritic() {
      var s0;

      var key    = peg$currPos * 135 + 25,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (peg$c60.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c61); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseunicodeFraction() {
      var s0;

      var key    = peg$currPos * 135 + 26,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (peg$c62.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c63); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseopArray() {
      var s0;

      var key    = peg$currPos * 135 + 27,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 9608) {
        s0 = peg$c64;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c65); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 9632) {
          s0 = peg$c66;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c67); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 64) {
            s0 = peg$c68;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c69); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 38) {
              s0 = peg$c70;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c71); }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseopOpen() {
      var s0;

      var key    = peg$currPos * 135 + 28,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (peg$c72.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c73); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseopClose() {
      var s0;

      var key    = peg$currPos * 135 + 29,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (peg$c74.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c75); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s0 = peg$c76;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c77); }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseopDecimal() {
      var s0;

      var key    = peg$currPos * 135 + 30,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 46) {
        s0 = peg$c78;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c79); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s0 = peg$c80;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c81); }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseopHbracket() {
      var s0;

      var key    = peg$currPos * 135 + 31,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (peg$c82.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c83); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseopStretchyArrow() {
      var s0;

      var key    = peg$currPos * 135 + 32,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (peg$c84.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c85); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseopNary() {
      var s0;

      var key    = peg$currPos * 135 + 33,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (peg$c86.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c87); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseopNaryand() {
      var s0;

      var key    = peg$currPos * 135 + 34,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 9618) {
        s0 = peg$c88;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c89); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseopDoublestruck() {
      var s0;

      var key    = peg$currPos * 135 + 35,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (peg$c90.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c91); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseopAtop() {
      var s0;

      var key    = peg$currPos * 135 + 36,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 166) {
        s0 = peg$c92;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c93); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseopChoose() {
      var s0;

      var key    = peg$currPos * 135 + 37,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 9374) {
        s0 = peg$c94;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c95); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseopFraction() {
      var s0;

      var key    = peg$currPos * 135 + 38,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 47) {
        s0 = peg$c96;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c97); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 8260) {
          s0 = peg$c98;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c99); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 8725) {
            s0 = peg$c100;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c101); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 8856) {
              s0 = peg$c102;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c103); }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseopEnclosure() {
      var s0;

      var key    = peg$currPos * 135 + 39,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 9645) {
        s0 = peg$c104;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c105); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 772) {
          s0 = peg$c106;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c107); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 9601) {
            s0 = peg$c108;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c109); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 9634) {
              s0 = peg$c110;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c111); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 9675) {
                s0 = peg$c112;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c113); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 10188) {
                  s0 = peg$c114;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c115); }
                }
                if (s0 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 8423) {
                    s0 = peg$c116;
                    peg$currPos++;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c117); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 11053) {
                      s0 = peg$c118;
                      peg$currPos++;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c119); }
                    }
                  }
                }
              }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseopEqNumber() {
      var s0;

      var key    = peg$currPos * 135 + 40,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 35) {
        s0 = peg$c120;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c121); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseopPhantom() {
      var s0;

      var key    = peg$currPos * 135 + 41,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 10209) {
        s0 = peg$c122;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c123); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 11012) {
          s0 = peg$c124;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c125); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 8691) {
            s0 = peg$c126;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c127); }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseopSmash() {
      var s0;

      var key    = peg$currPos * 135 + 42,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 11021) {
        s0 = peg$c128;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c129); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 11014) {
          s0 = peg$c130;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c131); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 11015) {
            s0 = peg$c132;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c133); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 11020) {
              s0 = peg$c134;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c135); }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseopAbstractBox() {
      var s0;

      var key    = peg$currPos * 135 + 43,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 9633) {
        s0 = peg$c136;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c137); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseopRoot() {
      var s0;

      var key    = peg$currPos * 135 + 44,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 8730) {
        s0 = peg$c138;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c139); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 8731) {
          s0 = peg$c140;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c141); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 8732) {
            s0 = peg$c142;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c143); }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseopSubSup() {
      var s0;

      var key    = peg$currPos * 135 + 45,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 95) {
        s0 = peg$c144;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c145); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 94) {
          s0 = peg$c146;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c147); }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseopAboveBelow() {
      var s0;

      var key    = peg$currPos * 135 + 46,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 9516) {
        s0 = peg$c148;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c149); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 9524) {
          s0 = peg$c150;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c151); }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseopSizeOverride() {
      var s0;

      var key    = peg$currPos * 135 + 47,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 8498) {
        s0 = peg$c152;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c153); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseopColor() {
      var s0;

      var key    = peg$currPos * 135 + 48,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 9998) {
        s0 = peg$c154;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c155); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseopBgColor() {
      var s0;

      var key    = peg$currPos * 135 + 49,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 9729) {
        s0 = peg$c156;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c157); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseopCommentOpen() {
      var s0;

      var key    = peg$currPos * 135 + 50,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 10999) {
        s0 = peg$c158;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c159); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseopCommentClose() {
      var s0;

      var key    = peg$currPos * 135 + 51,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 11000) {
        s0 = peg$c160;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c161); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseopTt() {
      var s0;

      var key    = peg$currPos * 135 + 52,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 65495) {
        s0 = peg$c162;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c163); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseopBuildup() {
      var s0;

      var key    = peg$currPos * 135 + 53,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (peg$c164.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c165); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s0 = peg$c76;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c77); }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseother() {
      var s0, s1, s2;

      var key    = peg$currPos * 135 + 54,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parse_();
      if (s2 === peg$FAILED) {
        s2 = peg$parseαn();
        if (s2 === peg$FAILED) {
          s2 = peg$parsenASCII();
          if (s2 === peg$FAILED) {
            s2 = peg$parsediacritic();
            if (s2 === peg$FAILED) {
              s2 = peg$parseunicodeFraction();
              if (s2 === peg$FAILED) {
                s2 = peg$parseopBuildup();
                if (s2 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s2 = peg$c0;
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c1); }
                  }
                }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsechar();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseexp() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 135 + 55,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseelement();
        if (s4 === peg$FAILED) {
          s4 = peg$parseoperator();
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parseelement();
            if (s4 === peg$FAILED) {
              s4 = peg$parseoperator();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse__();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c166(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseoperator() {
      var s0, s1, s2;

      var key    = peg$currPos * 135 + 56,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsemathspaces();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c167(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c168) {
          s1 = peg$c168;
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c169); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c170();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c171) {
            s1 = peg$c171;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c172); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c173();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$currPos;
            peg$silentFails++;
            s2 = peg$parsebasicOperator();
            peg$silentFails--;
            if (s2 !== peg$FAILED) {
              peg$currPos = s1;
              s1 = void 0;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsesubsupScript();
              if (s2 === peg$FAILED) {
                s2 = peg$parseabovebelowScript();
              }
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c174(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parsebasicOperator();
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsebasicOperator() {
      var s0, s1;

      var key    = peg$currPos * 135 + 57,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$parsenegatedOperator();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parserawOperator();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c175(s1);
        }
        s0 = s1;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsenegatedOperator() {
      var s0, s1, s2;

      var key    = peg$currPos * 135 + 58,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parserawOperator();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 824) {
          s2 = peg$c176;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c177); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c178(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 47) {
          s1 = peg$c96;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c97); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parserawOperator();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c178(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parserawOperator() {
      var s0, s1;

      var key    = peg$currPos * 135 + 59,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$parsemappedOperator();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseother();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c179(s1);
        }
        s0 = s1;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsemappedOperator() {
      var s0, s1;

      var key    = peg$currPos * 135 + 60,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 42) {
        s1 = peg$c180;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c181); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c182();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c183) {
          s1 = peg$c183;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c184); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c185();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 45) {
            s1 = peg$c186;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c187); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c188();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c189) {
              s1 = peg$c189;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c190); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c191();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c192) {
                s1 = peg$c192;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c193); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c194();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c195) {
                  s1 = peg$c195;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c196); }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c197();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c198) {
                    s1 = peg$c198;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c199); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c200();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c201) {
                      s1 = peg$c201;
                      peg$currPos += 2;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c202); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c203();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 2) === peg$c204) {
                        s1 = peg$c204;
                        peg$currPos += 2;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c205); }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c206();
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 2) === peg$c207) {
                          s1 = peg$c207;
                          peg$currPos += 2;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c208); }
                        }
                        if (s1 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c209();
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.substr(peg$currPos, 2) === peg$c210) {
                            s1 = peg$c210;
                            peg$currPos += 2;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c211); }
                          }
                          if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c212();
                          }
                          s0 = s1;
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 2) === peg$c213) {
                              s1 = peg$c213;
                              peg$currPos += 2;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c214); }
                            }
                            if (s1 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c215();
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              if (input.substr(peg$currPos, 2) === peg$c216) {
                                s1 = peg$c216;
                                peg$currPos += 2;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c217); }
                              }
                              if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c218();
                              }
                              s0 = s1;
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.substr(peg$currPos, 3) === peg$c219) {
                                  s1 = peg$c219;
                                  peg$currPos += 3;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c220); }
                                }
                                if (s1 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c221();
                                }
                                s0 = s1;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseelement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 135 + 61,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$parsearray();
      if (s0 === peg$FAILED) {
        s0 = peg$parsematrix();
        if (s0 === peg$FAILED) {
          s0 = peg$parsenary();
          if (s0 === peg$FAILED) {
            s0 = peg$parsephantomSmash();
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseoperand();
              if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                peg$silentFails++;
                s3 = peg$currPos;
                s4 = peg$parse__();
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$currPos;
                  s6 = peg$parseopFraction();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$currPos;
                    peg$silentFails++;
                    s8 = peg$parserawOperator();
                    peg$silentFails--;
                    if (s8 === peg$FAILED) {
                      s7 = void 0;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                    if (s7 !== peg$FAILED) {
                      s6 = [s6, s7];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseopAtop();
                    if (s5 === peg$FAILED) {
                      s5 = peg$parseopChoose();
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                peg$silentFails--;
                if (s3 === peg$FAILED) {
                  s2 = void 0;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
                if (s2 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c222(s1);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$parsefraction();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseatop();
                }
              }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsearray() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 135 + 62,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c223) {
        s1 = peg$c223;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c224); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsearows();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s3 = peg$c225;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c226); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c227(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsearows() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 135 + 63,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsearow();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 64) {
          s4 = peg$c68;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c69); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsearow();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 64) {
            s4 = peg$c68;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c69); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsearow();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c228(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsearow() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 135 + 64,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexp();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parse__();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 38) {
              s6 = peg$c70;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c71); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parse__();
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parseexp();
                if (s8 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parse__();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 38) {
                s6 = peg$c70;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c71); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parse__();
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseexp();
                  if (s8 !== peg$FAILED) {
                    s5 = [s5, s6, s7, s8];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c229(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsematrix() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 135 + 65,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c230) {
        s1 = peg$c230;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c231); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsemrows();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s3 = peg$c225;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c226); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c232(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c233) {
          s1 = peg$c233;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c234); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsemrows();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s3 = peg$c225;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c226); }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c235(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsemrows() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 135 + 66,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsemrow();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 64) {
          s4 = peg$c68;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c69); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsemrow();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 64) {
            s4 = peg$c68;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c69); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsemrow();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c236(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsemrow() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 135 + 67,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexp();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parse__();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 38) {
              s6 = peg$c70;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c71); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parse__();
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parseexp();
                if (s8 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parse__();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 38) {
                s6 = peg$c70;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c71); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parse__();
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseexp();
                  if (s8 !== peg$FAILED) {
                    s5 = [s5, s6, s7, s8];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c237(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsenary() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 135 + 68,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseopNary();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsebitmask();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsescript();
          if (s3 === peg$FAILED) {
            s3 = peg$parseabscript();
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseopNaryand();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseelement();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c238(s1, s2, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsephantomSmash() {
      var s0;

      var key    = peg$currPos * 135 + 69,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$parsephantom();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesmash();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsephantom() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 135 + 70,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c239) {
        s1 = peg$c239;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c240); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsebitmask();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 38) {
            s3 = peg$c70;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c71); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseexp();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c225;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c226); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c241(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseopPhantom();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s2 = peg$c242;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c243); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseexp();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s4 = peg$c225;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c226); }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c244(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesmash() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 135 + 71,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseopSmash();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c242;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c243); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexp();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s4 = peg$c225;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c226); }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c245(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsefraction() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 135 + 72,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseunicodeFraction();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c246(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$currPos;
        s3 = peg$parseoperand();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseopFraction();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$currPos;
            s3 = peg$parseoperand();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse__();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseopFraction();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse__();
                  if (s6 === peg$FAILED) {
                    s6 = null;
                  }
                  if (s6 !== peg$FAILED) {
                    s3 = [s3, s4, s5, s6];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseoperand();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c247(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseatop() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 135 + 73,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parseoperand();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseopAtop();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            if (s6 !== peg$FAILED) {
              s3 = [s3, s4, s5, s6];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$parseoperand();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseopAtop();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                if (s6 === peg$FAILED) {
                  s6 = null;
                }
                if (s6 !== peg$FAILED) {
                  s3 = [s3, s4, s5, s6];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseoperand();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c248(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseoperand();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseopChoose();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse__();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseoperand();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c249(s1, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseoperand() {
      var s0, s1;

      var key    = peg$currPos * 135 + 74,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = [];
      s1 = peg$parsefactor();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parsefactor();
        }
      } else {
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsefactor() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 135 + 75,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$parsepreScript();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        peg$silentFails++;
        s2 = peg$parsefunctionName();
        peg$silentFails--;
        if (s2 === peg$FAILED) {
          s1 = void 0;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseentity();
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 95) {
              s4 = peg$c144;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c145); }
            }
            if (s4 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 94) {
                s4 = peg$c146;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c147); }
              }
              if (s4 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 9516) {
                  s4 = peg$c148;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c149); }
                }
                if (s4 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 9524) {
                    s4 = peg$c150;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c151); }
                  }
                  if (s4 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 39) {
                      s4 = peg$c250;
                      peg$currPos++;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c251); }
                    }
                    if (s4 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 8242) {
                        s4 = peg$c252;
                        peg$currPos++;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c253); }
                      }
                      if (s4 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 8243) {
                          s4 = peg$c254;
                          peg$currPos++;
                        } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c255); }
                        }
                        if (s4 === peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 8244) {
                            s4 = peg$c256;
                            peg$currPos++;
                          } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c257); }
                          }
                          if (s4 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 8279) {
                              s4 = peg$c258;
                              peg$currPos++;
                            } else {
                              s4 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c259); }
                            }
                            if (s4 === peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 8252) {
                                s4 = peg$c260;
                                peg$currPos++;
                              } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c261); }
                              }
                              if (s4 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 33) {
                                  s4 = peg$c262;
                                  peg$currPos++;
                                } else {
                                  s4 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c263); }
                                }
                                if (s4 === peg$FAILED) {
                                  if (peg$c264.test(input.charAt(peg$currPos))) {
                                    s4 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                  } else {
                                    s4 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c265); }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            peg$silentFails--;
            if (s4 === peg$FAILED) {
              s3 = void 0;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c266(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsesubsupScript();
          if (s0 === peg$FAILED) {
            s0 = peg$parseabovebelowScript();
            if (s0 === peg$FAILED) {
              s0 = peg$parsesfactor();
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesubsupScript() {
      var s0;

      var key    = peg$currPos * 135 + 76,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$parsesubsupSubsup();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesubsupSubscript();
        if (s0 === peg$FAILED) {
          s0 = peg$parsesubsupSuperscript();
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsescript() {
      var s0, s1;

      var key    = peg$currPos * 135 + 77,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsesubsup();
      if (s1 === peg$FAILED) {
        s1 = peg$parsesub();
        if (s1 === peg$FAILED) {
          s1 = peg$parsesup();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c267(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsescriptU() {
      var s0, s1;

      var key    = peg$currPos * 135 + 78,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsesubsupU();
      if (s1 === peg$FAILED) {
        s1 = peg$parsesubU();
        if (s1 === peg$FAILED) {
          s1 = peg$parsesupU();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c267(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsescriptL() {
      var s0, s1;

      var key    = peg$currPos * 135 + 79,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsesubsupL();
      if (s1 === peg$FAILED) {
        s1 = peg$parsesubL();
        if (s1 === peg$FAILED) {
          s1 = peg$parsesupL();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c267(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesubsupSubsup() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 135 + 80,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsescriptbase();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesubsup();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c268(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesubsup() {
      var s0, s1, s2;

      var key    = peg$currPos * 135 + 81,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsesubU();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesupU();
        if (s2 === peg$FAILED) {
          s2 = peg$parsesupL();
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c269(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsesupU();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsesubU();
          if (s2 === peg$FAILED) {
            s2 = peg$parsesubL();
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c270(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsesubsupL();
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesubsupU() {
      var s0, s1, s2;

      var key    = peg$currPos * 135 + 82,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsesubU();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesupU();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c269(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsesupU();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsesubU();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c270(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesubsupL() {
      var s0, s1, s2;

      var key    = peg$currPos * 135 + 83,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsesubL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesupL();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c269(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsesupL();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsesubL();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c270(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesubsupSubscript() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 135 + 84,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsescriptbase();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesub();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c268(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesub() {
      var s0;

      var key    = peg$currPos * 135 + 85,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$parsesubU();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesubL();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesubU() {
      var s0, s1;

      var key    = peg$currPos * 135 + 86,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseunicodeSub();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c271(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesubL() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 135 + 87,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 95) {
        s3 = peg$c144;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c145); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parsesoperand();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 95) {
            s3 = peg$c144;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c145); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsesoperand();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c272(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesubsupSuperscript() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 135 + 88,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsescriptbase();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesup();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c268(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesup() {
      var s0;

      var key    = peg$currPos * 135 + 89,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$parsesupU();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesupL();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesupU() {
      var s0, s1;

      var key    = peg$currPos * 135 + 90,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseunicodeSup();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c273(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesupL() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 135 + 91,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 94) {
        s3 = peg$c146;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c147); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parsesoperand();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 94) {
            s3 = peg$c146;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c147); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsesoperand();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c274(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsepreScript() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 135 + 92,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c242;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c243); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsescript();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c225;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c226); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseoperand();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c275(s3, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsescriptU();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseoperand();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c276(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsescript();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseoperand();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c277(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseabovebelowScript() {
      var s0;

      var key    = peg$currPos * 135 + 93,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$parseabovebelowAbovebelow();
      if (s0 === peg$FAILED) {
        s0 = peg$parseabovebelowAbove();
        if (s0 === peg$FAILED) {
          s0 = peg$parseabovebelowBelow();
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseabscript() {
      var s0, s1;

      var key    = peg$currPos * 135 + 94,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseabovebelow();
      if (s1 === peg$FAILED) {
        s1 = peg$parseabove();
        if (s1 === peg$FAILED) {
          s1 = peg$parsebelow();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c278(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseabovebelowAbovebelow() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 135 + 95,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsescriptbase();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseabovebelow();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c279(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseabovebelow() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 135 + 96,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 9516) {
        s1 = peg$c148;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c149); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesoperand();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 9524) {
            s3 = peg$c150;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c151); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsesoperand();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c280(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 9524) {
          s1 = peg$c150;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c151); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsesoperand();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 9516) {
              s3 = peg$c148;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c149); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsesoperand();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c281(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseabovebelowAbove() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 135 + 97,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsescriptbase();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseabove();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c279(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseabove() {
      var s0, s1, s2;

      var key    = peg$currPos * 135 + 98,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 9524) {
        s1 = peg$c150;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c151); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseabovebelowAbove();
        if (s2 === peg$FAILED) {
          s2 = peg$parsesoperand();
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c282(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseabovebelowBelow() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 135 + 99,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsescriptbase();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsebelow();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c279(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsebelow() {
      var s0, s1, s2;

      var key    = peg$currPos * 135 + 100,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 9516) {
        s1 = peg$c148;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c149); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseabovebelowBelow();
        if (s2 === peg$FAILED) {
          s2 = peg$parsesoperand();
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c283(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsescriptbase() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 135 + 101,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 124) {
        s1 = peg$c284;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c285); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c286();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseprimedbase();
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          s3 = peg$parseprime();
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = void 0;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c266(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseprimed();
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesoperand() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 135 + 102,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = [];
      s1 = peg$parsesfactor();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parsesfactor();
        }
      } else {
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsebasicOperator();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsesfactor();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsesfactor();
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c287(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsebasicOperator();
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parsebasicOperator();
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c288(s1);
          }
          s0 = s1;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesfactor() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 135 + 103,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$parseenclosed();
      if (s0 === peg$FAILED) {
        s0 = peg$parseabstractbox();
        if (s0 === peg$FAILED) {
          s0 = peg$parsehbrack();
          if (s0 === peg$FAILED) {
            s0 = peg$parseroot();
            if (s0 === peg$FAILED) {
              s0 = peg$parsefunction();
              if (s0 === peg$FAILED) {
                s0 = peg$parsetext();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsesizeOverride();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsecolored();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsecomment();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsett();
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parsescriptbase();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parsescriptU();
                            if (s2 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c289(s1, s2);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseentity();
                            if (s1 !== peg$FAILED) {
                              s2 = peg$currPos;
                              peg$silentFails++;
                              if (input.charCodeAt(peg$currPos) === 39) {
                                s3 = peg$c250;
                                peg$currPos++;
                              } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c251); }
                              }
                              if (s3 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 8242) {
                                  s3 = peg$c252;
                                  peg$currPos++;
                                } else {
                                  s3 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c253); }
                                }
                                if (s3 === peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 8243) {
                                    s3 = peg$c254;
                                    peg$currPos++;
                                  } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c255); }
                                  }
                                  if (s3 === peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 8244) {
                                      s3 = peg$c256;
                                      peg$currPos++;
                                    } else {
                                      s3 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c257); }
                                    }
                                    if (s3 === peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 8279) {
                                        s3 = peg$c258;
                                        peg$currPos++;
                                      } else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c259); }
                                      }
                                      if (s3 === peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 8252) {
                                          s3 = peg$c260;
                                          peg$currPos++;
                                        } else {
                                          s3 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c261); }
                                        }
                                        if (s3 === peg$FAILED) {
                                          if (input.charCodeAt(peg$currPos) === 33) {
                                            s3 = peg$c262;
                                            peg$currPos++;
                                          } else {
                                            s3 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c263); }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              peg$silentFails--;
                              if (s3 === peg$FAILED) {
                                s2 = void 0;
                              } else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                              }
                              if (s2 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c266(s1);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseprimed();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parsefactorial();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  if (input.charCodeAt(peg$currPos) === 8734) {
                                    s1 = peg$c290;
                                    peg$currPos++;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c291); }
                                  }
                                  if (s1 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c292();
                                  }
                                  s0 = s1;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseenclosed() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 135 + 104,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c293) {
        s1 = peg$c293;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c294); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsebitmask();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 38) {
            s3 = peg$c70;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c71); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseexp();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c225;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c226); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c295(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseopEnclosure();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s2 = peg$c242;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c243); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseexp();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s4 = peg$c225;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c226); }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c296(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseopEnclosure();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseoperand();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c297(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseabstractbox() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 135 + 105,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseopAbstractBox();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c242;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c243); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsebitmask();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 38) {
              s4 = peg$c70;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c71); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexp();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c225;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c226); }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c298(s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsehbrack() {
      var s0, s1, s2;

      var key    = peg$currPos * 135 + 106,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseopHbracket();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseoperand();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c299(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseroot() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 135 + 107,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c300) {
        s1 = peg$c300;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c301); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseoperand();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 38) {
            s3 = peg$c70;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c71); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseexp();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c225;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c226); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c302(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 8730) {
          s1 = peg$c138;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c139); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseexp();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseopNaryand();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseoperand();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c303(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 8730) {
            s1 = peg$c138;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c139); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseoperand();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c304(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 8731) {
              s1 = peg$c140;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c141); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseoperand();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c305(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 8732) {
                s1 = peg$c142;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c143); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseoperand();
                if (s2 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c306(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsefunction() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 135 + 108,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsefunctionName();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 8289) {
          s2 = peg$c307;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c308); }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parseopNaryand();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsescript();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseoperand();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c309(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsefunctionName();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseoperand();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c310(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsefunctionName() {
      var s0;

      var key    = peg$currPos * 135 + 109,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (input.substr(peg$currPos, 3) === peg$c311) {
        s0 = peg$c311;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c312); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c313) {
          s0 = peg$c313;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c314); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c315) {
            s0 = peg$c315;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c316); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c317) {
              s0 = peg$c317;
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c318); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c319) {
                s0 = peg$c319;
                peg$currPos += 6;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c320); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c321) {
                  s0 = peg$c321;
                  peg$currPos += 6;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c322); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c323) {
                    s0 = peg$c323;
                    peg$currPos += 4;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c324); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c325) {
                      s0 = peg$c325;
                      peg$currPos += 4;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c326); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 5) === peg$c327) {
                        s0 = peg$c327;
                        peg$currPos += 5;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c328); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 5) === peg$c329) {
                          s0 = peg$c329;
                          peg$currPos += 5;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c330); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 7) === peg$c331) {
                            s0 = peg$c331;
                            peg$currPos += 7;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c332); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 7) === peg$c333) {
                              s0 = peg$c333;
                              peg$currPos += 7;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c334); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 3) === peg$c335) {
                                s0 = peg$c335;
                                peg$currPos += 3;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c336); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 3) === peg$c337) {
                                  s0 = peg$c337;
                                  peg$currPos += 3;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c338); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 4) === peg$c339) {
                                    s0 = peg$c339;
                                    peg$currPos += 4;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c340); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 4) === peg$c341) {
                                      s0 = peg$c341;
                                      peg$currPos += 4;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c342); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 6) === peg$c343) {
                                        s0 = peg$c343;
                                        peg$currPos += 6;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c344); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 6) === peg$c345) {
                                          s0 = peg$c345;
                                          peg$currPos += 6;
                                        } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c346); }
                                        }
                                        if (s0 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 4) === peg$c347) {
                                            s0 = peg$c347;
                                            peg$currPos += 4;
                                          } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c348); }
                                          }
                                          if (s0 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 4) === peg$c349) {
                                              s0 = peg$c349;
                                              peg$currPos += 4;
                                            } else {
                                              s0 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c350); }
                                            }
                                            if (s0 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 5) === peg$c351) {
                                                s0 = peg$c351;
                                                peg$currPos += 5;
                                              } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c352); }
                                              }
                                              if (s0 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 5) === peg$c353) {
                                                  s0 = peg$c353;
                                                  peg$currPos += 5;
                                                } else {
                                                  s0 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c354); }
                                                }
                                                if (s0 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 7) === peg$c355) {
                                                    s0 = peg$c355;
                                                    peg$currPos += 7;
                                                  } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c356); }
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 7) === peg$c357) {
                                                      s0 = peg$c357;
                                                      peg$currPos += 7;
                                                    } else {
                                                      s0 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c358); }
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 3) === peg$c359) {
                                                        s0 = peg$c359;
                                                        peg$currPos += 3;
                                                      } else {
                                                        s0 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c360); }
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 3) === peg$c361) {
                                                          s0 = peg$c361;
                                                          peg$currPos += 3;
                                                        } else {
                                                          s0 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c362); }
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          if (input.substr(peg$currPos, 4) === peg$c363) {
                                                            s0 = peg$c363;
                                                            peg$currPos += 4;
                                                          } else {
                                                            s0 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c364); }
                                                          }
                                                          if (s0 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 4) === peg$c365) {
                                                              s0 = peg$c365;
                                                              peg$currPos += 4;
                                                            } else {
                                                              s0 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c366); }
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                              if (input.substr(peg$currPos, 6) === peg$c367) {
                                                                s0 = peg$c367;
                                                                peg$currPos += 6;
                                                              } else {
                                                                s0 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c368); }
                                                              }
                                                              if (s0 === peg$FAILED) {
                                                                if (input.substr(peg$currPos, 6) === peg$c369) {
                                                                  s0 = peg$c369;
                                                                  peg$currPos += 6;
                                                                } else {
                                                                  s0 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$c370); }
                                                                }
                                                                if (s0 === peg$FAILED) {
                                                                  if (input.substr(peg$currPos, 4) === peg$c371) {
                                                                    s0 = peg$c371;
                                                                    peg$currPos += 4;
                                                                  } else {
                                                                    s0 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c372); }
                                                                  }
                                                                  if (s0 === peg$FAILED) {
                                                                    if (input.substr(peg$currPos, 4) === peg$c373) {
                                                                      s0 = peg$c373;
                                                                      peg$currPos += 4;
                                                                    } else {
                                                                      s0 = peg$FAILED;
                                                                      if (peg$silentFails === 0) { peg$fail(peg$c374); }
                                                                    }
                                                                    if (s0 === peg$FAILED) {
                                                                      if (input.substr(peg$currPos, 5) === peg$c375) {
                                                                        s0 = peg$c375;
                                                                        peg$currPos += 5;
                                                                      } else {
                                                                        s0 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$c376); }
                                                                      }
                                                                      if (s0 === peg$FAILED) {
                                                                        if (input.substr(peg$currPos, 5) === peg$c377) {
                                                                          s0 = peg$c377;
                                                                          peg$currPos += 5;
                                                                        } else {
                                                                          s0 = peg$FAILED;
                                                                          if (peg$silentFails === 0) { peg$fail(peg$c378); }
                                                                        }
                                                                        if (s0 === peg$FAILED) {
                                                                          if (input.substr(peg$currPos, 7) === peg$c379) {
                                                                            s0 = peg$c379;
                                                                            peg$currPos += 7;
                                                                          } else {
                                                                            s0 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$c380); }
                                                                          }
                                                                          if (s0 === peg$FAILED) {
                                                                            if (input.substr(peg$currPos, 7) === peg$c381) {
                                                                              s0 = peg$c381;
                                                                              peg$currPos += 7;
                                                                            } else {
                                                                              s0 = peg$FAILED;
                                                                              if (peg$silentFails === 0) { peg$fail(peg$c382); }
                                                                            }
                                                                            if (s0 === peg$FAILED) {
                                                                              if (input.substr(peg$currPos, 3) === peg$c383) {
                                                                                s0 = peg$c383;
                                                                                peg$currPos += 3;
                                                                              } else {
                                                                                s0 = peg$FAILED;
                                                                                if (peg$silentFails === 0) { peg$fail(peg$c384); }
                                                                              }
                                                                              if (s0 === peg$FAILED) {
                                                                                if (input.substr(peg$currPos, 3) === peg$c385) {
                                                                                  s0 = peg$c385;
                                                                                  peg$currPos += 3;
                                                                                } else {
                                                                                  s0 = peg$FAILED;
                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c386); }
                                                                                }
                                                                                if (s0 === peg$FAILED) {
                                                                                  if (input.substr(peg$currPos, 3) === peg$c387) {
                                                                                    s0 = peg$c387;
                                                                                    peg$currPos += 3;
                                                                                  } else {
                                                                                    s0 = peg$FAILED;
                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c388); }
                                                                                  }
                                                                                  if (s0 === peg$FAILED) {
                                                                                    if (input.substr(peg$currPos, 3) === peg$c389) {
                                                                                      s0 = peg$c389;
                                                                                      peg$currPos += 3;
                                                                                    } else {
                                                                                      s0 = peg$FAILED;
                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c390); }
                                                                                    }
                                                                                    if (s0 === peg$FAILED) {
                                                                                      if (input.substr(peg$currPos, 3) === peg$c391) {
                                                                                        s0 = peg$c391;
                                                                                        peg$currPos += 3;
                                                                                      } else {
                                                                                        s0 = peg$FAILED;
                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c392); }
                                                                                      }
                                                                                      if (s0 === peg$FAILED) {
                                                                                        if (input.substr(peg$currPos, 3) === peg$c393) {
                                                                                          s0 = peg$c393;
                                                                                          peg$currPos += 3;
                                                                                        } else {
                                                                                          s0 = peg$FAILED;
                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c394); }
                                                                                        }
                                                                                        if (s0 === peg$FAILED) {
                                                                                          if (input.substr(peg$currPos, 3) === peg$c395) {
                                                                                            s0 = peg$c395;
                                                                                            peg$currPos += 3;
                                                                                          } else {
                                                                                            s0 = peg$FAILED;
                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c396); }
                                                                                          }
                                                                                          if (s0 === peg$FAILED) {
                                                                                            if (input.substr(peg$currPos, 3) === peg$c397) {
                                                                                              s0 = peg$c397;
                                                                                              peg$currPos += 3;
                                                                                            } else {
                                                                                              s0 = peg$FAILED;
                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c398); }
                                                                                            }
                                                                                            if (s0 === peg$FAILED) {
                                                                                              if (input.substr(peg$currPos, 2) === peg$c399) {
                                                                                                s0 = peg$c399;
                                                                                                peg$currPos += 2;
                                                                                              } else {
                                                                                                s0 = peg$FAILED;
                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c400); }
                                                                                              }
                                                                                              if (s0 === peg$FAILED) {
                                                                                                if (input.substr(peg$currPos, 3) === peg$c401) {
                                                                                                  s0 = peg$c401;
                                                                                                  peg$currPos += 3;
                                                                                                } else {
                                                                                                  s0 = peg$FAILED;
                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c402); }
                                                                                                }
                                                                                                if (s0 === peg$FAILED) {
                                                                                                  if (input.substr(peg$currPos, 3) === peg$c403) {
                                                                                                    s0 = peg$c403;
                                                                                                    peg$currPos += 3;
                                                                                                  } else {
                                                                                                    s0 = peg$FAILED;
                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c404); }
                                                                                                  }
                                                                                                  if (s0 === peg$FAILED) {
                                                                                                    if (input.substr(peg$currPos, 3) === peg$c405) {
                                                                                                      s0 = peg$c405;
                                                                                                      peg$currPos += 3;
                                                                                                    } else {
                                                                                                      s0 = peg$FAILED;
                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c406); }
                                                                                                    }
                                                                                                    if (s0 === peg$FAILED) {
                                                                                                      if (input.substr(peg$currPos, 3) === peg$c407) {
                                                                                                        s0 = peg$c407;
                                                                                                        peg$currPos += 3;
                                                                                                      } else {
                                                                                                        s0 = peg$FAILED;
                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c408); }
                                                                                                      }
                                                                                                      if (s0 === peg$FAILED) {
                                                                                                        if (input.substr(peg$currPos, 2) === peg$c409) {
                                                                                                          s0 = peg$c409;
                                                                                                          peg$currPos += 2;
                                                                                                        } else {
                                                                                                          s0 = peg$FAILED;
                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c410); }
                                                                                                        }
                                                                                                        if (s0 === peg$FAILED) {
                                                                                                          if (input.substr(peg$currPos, 2) === peg$c411) {
                                                                                                            s0 = peg$c411;
                                                                                                            peg$currPos += 2;
                                                                                                          } else {
                                                                                                            s0 = peg$FAILED;
                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c412); }
                                                                                                          }
                                                                                                          if (s0 === peg$FAILED) {
                                                                                                            if (input.substr(peg$currPos, 3) === peg$c413) {
                                                                                                              s0 = peg$c413;
                                                                                                              peg$currPos += 3;
                                                                                                            } else {
                                                                                                              s0 = peg$FAILED;
                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c414); }
                                                                                                            }
                                                                                                            if (s0 === peg$FAILED) {
                                                                                                              if (input.substr(peg$currPos, 3) === peg$c415) {
                                                                                                                s0 = peg$c415;
                                                                                                                peg$currPos += 3;
                                                                                                              } else {
                                                                                                                s0 = peg$FAILED;
                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c416); }
                                                                                                              }
                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                if (input.substr(peg$currPos, 3) === peg$c417) {
                                                                                                                  s0 = peg$c417;
                                                                                                                  peg$currPos += 3;
                                                                                                                } else {
                                                                                                                  s0 = peg$FAILED;
                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c418); }
                                                                                                                }
                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                  if (input.substr(peg$currPos, 3) === peg$c419) {
                                                                                                                    s0 = peg$c419;
                                                                                                                    peg$currPos += 3;
                                                                                                                  } else {
                                                                                                                    s0 = peg$FAILED;
                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c420); }
                                                                                                                  }
                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                    if (input.substr(peg$currPos, 3) === peg$c421) {
                                                                                                                      s0 = peg$c421;
                                                                                                                      peg$currPos += 3;
                                                                                                                    } else {
                                                                                                                      s0 = peg$FAILED;
                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c422); }
                                                                                                                    }
                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                      if (input.substr(peg$currPos, 3) === peg$c423) {
                                                                                                                        s0 = peg$c423;
                                                                                                                        peg$currPos += 3;
                                                                                                                      } else {
                                                                                                                        s0 = peg$FAILED;
                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c424); }
                                                                                                                      }
                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                        if (input.substr(peg$currPos, 3) === peg$c425) {
                                                                                                                          s0 = peg$c425;
                                                                                                                          peg$currPos += 3;
                                                                                                                        } else {
                                                                                                                          s0 = peg$FAILED;
                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c426); }
                                                                                                                        }
                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                          if (input.substr(peg$currPos, 3) === peg$c427) {
                                                                                                                            s0 = peg$c427;
                                                                                                                            peg$currPos += 3;
                                                                                                                          } else {
                                                                                                                            s0 = peg$FAILED;
                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c428); }
                                                                                                                          }
                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                            if (input.substr(peg$currPos, 7) === peg$c429) {
                                                                                                                              s0 = peg$c429;
                                                                                                                              peg$currPos += 7;
                                                                                                                            } else {
                                                                                                                              s0 = peg$FAILED;
                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c430); }
                                                                                                                            }
                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                              if (input.substr(peg$currPos, 7) === peg$c431) {
                                                                                                                                s0 = peg$c431;
                                                                                                                                peg$currPos += 7;
                                                                                                                              } else {
                                                                                                                                s0 = peg$FAILED;
                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c432); }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsetext() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 135 + 110,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c433;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c434); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (input.substr(peg$currPos, 2) === peg$c435) {
          s3 = peg$c435;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c436); }
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 34) {
            s5 = peg$c433;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c434); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsechar();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (input.substr(peg$currPos, 2) === peg$c435) {
              s3 = peg$c435;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c436); }
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$currPos;
              peg$silentFails++;
              if (input.charCodeAt(peg$currPos) === 34) {
                s5 = peg$c433;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c434); }
              }
              peg$silentFails--;
              if (s5 === peg$FAILED) {
                s4 = void 0;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsechar();
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c433;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c434); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c437(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesizeOverride() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 135 + 111,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseopSizeOverride();
      if (s1 !== peg$FAILED) {
        if (peg$c438.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c439); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseoperand();
          if (s3 === peg$FAILED) {
            s3 = peg$parsebasicOperator();
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c440(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsecolored() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 135 + 112,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseopColor();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c242;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c243); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecolor();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 38) {
              s4 = peg$c70;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c71); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexp();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c225;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c226); }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c441(s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseopBgColor();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s2 = peg$c242;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c243); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsecolor();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 38) {
                s4 = peg$c70;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c71); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseexp();
                if (s5 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s6 = peg$c225;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c226); }
                  }
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c442(s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsecolor() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 135 + 113,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 38) {
        s4 = peg$c70;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c71); }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = void 0;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parsechar();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 38) {
            s4 = peg$c70;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c71); }
          }
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = void 0;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsechar();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c443(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsecomment() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 135 + 114,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseopCommentOpen();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s4 = peg$c444;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c445); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseopCommentClose();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parseopCommentClose();
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsechar();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s4 = peg$c444;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c445); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseopCommentClose();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = peg$parseopCommentClose();
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = void 0;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsechar();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseopCommentClose();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c446(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsett() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 135 + 115,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseopTt();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c242;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c243); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (input.substr(peg$currPos, 2) === peg$c447) {
            s4 = peg$c447;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c448); }
          }
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 41) {
              s6 = peg$c225;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c226); }
            }
            peg$silentFails--;
            if (s6 === peg$FAILED) {
              s5 = void 0;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsechar();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (input.substr(peg$currPos, 2) === peg$c447) {
              s4 = peg$c447;
              peg$currPos += 2;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c448); }
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$currPos;
              peg$silentFails++;
              if (input.charCodeAt(peg$currPos) === 41) {
                s6 = peg$c225;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c226); }
              }
              peg$silentFails--;
              if (s6 === peg$FAILED) {
                s5 = void 0;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsechar();
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s4 = peg$c225;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c226); }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c449(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseprimed() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 135 + 116,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseprimedbase();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseprime();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseprime();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c450(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseprimedbase() {
      var s0, s1;

      var key    = peg$currPos * 135 + 117,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$parseentity();
      if (s0 === peg$FAILED) {
        s0 = peg$parsebasicOperator();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseopNary();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c451(s1);
          }
          s0 = s1;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseprime() {
      var s0, s1;

      var key    = peg$currPos * 135 + 118,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c250;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c251); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 8242) {
          s1 = peg$c252;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c253); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c452();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 8243) {
          s1 = peg$c254;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c255); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c453();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 8244) {
            s1 = peg$c256;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c257); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c454();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 8279) {
              s1 = peg$c258;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c259); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c455();
            }
            s0 = s1;
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsefactorial() {
      var s0, s1, s2;

      var key    = peg$currPos * 135 + 119,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseentity();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 8252) {
          s2 = peg$c260;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c261); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c216) {
            s2 = peg$c216;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c217); }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c456(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseentity();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 33) {
            s2 = peg$c262;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c263); }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c457(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseentity() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 135 + 120,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseexpBracket();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 160) {
          s3 = peg$c458;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c459); }
        }
        if (s3 === peg$FAILED) {
          s3 = peg$parsediacritic();
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c266(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseatoms();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedoublestruck();
          if (s0 === peg$FAILED) {
            s0 = peg$parsenumber();
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseatoms() {
      var s0, s1, s2;

      var key    = peg$currPos * 135 + 121,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseatom();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseatom();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c460(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseatom() {
      var s0, s1, s2;

      var key    = peg$currPos * 135 + 122,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$parsediacriticized();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c444;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c445); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsechar();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c461(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseαn();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c462(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$parsemathspaces();
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsediacriticized() {
      var s0, s1, s2;

      var key    = peg$currPos * 135 + 123,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsediacriticbase();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsediacritics();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c463(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsediacriticbase() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 135 + 124,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseαn();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c464(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsenASCII();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c465(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 40) {
            s1 = peg$c242;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c243); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseexp();
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s3 = peg$c225;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c226); }
              }
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 160) {
                  s4 = peg$c458;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c459); }
                }
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c466(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsediacritics() {
      var s0, s1, s2;

      var key    = peg$currPos * 135 + 125,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsediacritic();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsediacritic();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c467(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsemathspaces() {
      var s0, s1, s2;

      var key    = peg$currPos * 135 + 126,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsemathspace();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsemathspace();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c468(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsemathspace() {
      var s0, s1, s2;

      var key    = peg$currPos * 135 + 127,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 8203) {
        s1 = peg$c469;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c470); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c471();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 8202) {
          s1 = peg$c472;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c473); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c474();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 8202) {
            s1 = peg$c472;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c473); }
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 8202) {
              s2 = peg$c472;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c473); }
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c475();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 8201) {
              s1 = peg$c476;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c477); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c478();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 8287) {
                s1 = peg$c479;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c480); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c481();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 8197) {
                  s1 = peg$c482;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c483); }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c484();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 8196) {
                    s1 = peg$c485;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c486); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c487();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 8196) {
                      s1 = peg$c485;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c486); }
                    }
                    if (s1 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 8202) {
                        s2 = peg$c472;
                        peg$currPos++;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c473); }
                      }
                      if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c488();
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 8194) {
                        s1 = peg$c489;
                        peg$currPos++;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c490); }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c491();
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 8195) {
                          s1 = peg$c492;
                          peg$currPos++;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c493); }
                        }
                        if (s1 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c494();
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 8199) {
                            s1 = peg$c495;
                            peg$currPos++;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c496); }
                          }
                          if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c497();
                          }
                          s0 = s1;
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 160) {
                              s1 = peg$c458;
                              peg$currPos++;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c459); }
                            }
                            if (s1 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c498();
                            }
                            s0 = s1;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsenumber() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 135 + 128,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseopDecimal();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedigits();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c499(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsedigits();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseopDecimal();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsedigits();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c500(s1, s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsedigits();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c501(s1);
          }
          s0 = s1;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsedigits() {
      var s0, s1, s2;

      var key    = peg$currPos * 135 + 129,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsenASCII();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsenASCII();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c502(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsedoublestruck() {
      var s0, s1;

      var key    = peg$currPos * 135 + 130,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseopDoublestruck();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c503(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseexpBracket() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 135 + 131,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseexpBracketOpen();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpBracketContents();
        if (s2 === peg$FAILED) {
          s2 = peg$parseε();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseexpBracketClose();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = void 0;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c504();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c505) {
          s1 = peg$c505;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c506); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 8214) {
            s1 = peg$c507;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c508); }
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseexp();
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c505) {
              s3 = peg$c505;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c506); }
            }
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 8214) {
                s3 = peg$c507;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c508); }
              }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c509(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 124) {
            s1 = peg$c284;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c285); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseexp();
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 124) {
                s3 = peg$c284;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c285); }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c510(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 124) {
              s1 = peg$c284;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c285); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseexp();
              if (s2 !== peg$FAILED) {
                s3 = peg$currPos;
                peg$silentFails++;
                if (input.charCodeAt(peg$currPos) === 41) {
                  s4 = peg$c225;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c226); }
                }
                peg$silentFails--;
                if (s4 === peg$FAILED) {
                  s3 = void 0;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseexpBracketClose();
                  if (s4 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c511(s2, s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseexpBracketOpen();
              if (s1 !== peg$FAILED) {
                s2 = peg$parse__();
                if (s2 === peg$FAILED) {
                  s2 = null;
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseexpBracketClose();
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c512(s1, s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseexpBracketOpen();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseexpBracketContents();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseexpBracketClose();
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c513(s1, s2, s3);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c514) {
                    s1 = peg$c514;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c515); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsearows();
                    if (s2 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s3 = peg$c225;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c226); }
                      }
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c516(s2);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                }
              }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseexpBracketOpen() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 135 + 132,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 12310) {
        s1 = peg$c517;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c518); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c519();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseopOpen();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c520(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 9500) {
            s1 = peg$c521;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c522); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsebitmask();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseopOpen();
              if (s3 === peg$FAILED) {
                s3 = peg$parseopClose();
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c523(s2, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 9500) {
              s1 = peg$c521;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c522); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseopOpen();
              if (s2 === peg$FAILED) {
                s2 = peg$parseopClose();
                if (s2 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 124) {
                    s2 = peg$c284;
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c285); }
                  }
                  if (s2 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 8214) {
                      s2 = peg$c507;
                      peg$currPos++;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c508); }
                    }
                  }
                }
              }
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c520(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 9500) {
                s1 = peg$c521;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c522); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c519();
              }
              s0 = s1;
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseexpBracketClose() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 135 + 133,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 12311) {
        s1 = peg$c524;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c525); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c519();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseopClose();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c526(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c527) {
            s1 = peg$c527;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c528); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c529();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c530) {
              s1 = peg$c530;
              peg$currPos += 3;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c531); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c532) {
                s1 = peg$c532;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c533); }
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c534();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 9508) {
                s1 = peg$c535;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c536); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parsebitmask();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseopOpen();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseopClose();
                  }
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c537(s2, s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 9508) {
                  s1 = peg$c535;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c536); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseopOpen();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseopClose();
                    if (s2 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 124) {
                        s2 = peg$c284;
                        peg$currPos++;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c285); }
                      }
                      if (s2 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 8214) {
                          s2 = peg$c507;
                          peg$currPos++;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c508); }
                        }
                      }
                    }
                  }
                  if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c526(s2);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 9508) {
                    s1 = peg$c535;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c536); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c519();
                  }
                  s0 = s1;
                }
              }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseexpBracketContents() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 135 + 134,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseexp();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 9474) {
          s3 = peg$c538;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c539); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 8739) {
            s3 = peg$c540;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c541); }
          }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c266(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$currPos;
        s3 = peg$parseexp();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 9474) {
            s4 = peg$c538;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c539); }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$currPos;
            s3 = peg$parseexp();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 9474) {
                s4 = peg$c538;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c539); }
              }
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseexp();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c542(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$currPos;
          s3 = peg$parseexp();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 8739) {
              s4 = peg$c540;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c541); }
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$currPos;
              s3 = peg$parseexp();
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 8739) {
                  s4 = peg$c540;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c541); }
                }
                if (s4 !== peg$FAILED) {
                  s3 = [s3, s4];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseexp();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c543(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }


        // wrap value in JSON object {label: value}
        function label(lbl, val) {
            return {[lbl]: val};
        }

        // left-associative (i.e. right-deep) nesting with labeling
        // [a, b, c] => {label: [a, {label: [b, c]}]}
        function nestLeft(lbl, lis) {
            lis.reverse();
            var ret = lis[0];
            lis = lis.slice(1,lis.length);
            for (var elem in lis) {
                ret = label(lbl, [lis[elem], ret]);
            }
            return ret;
        }

        // right-associative (i.e. left-deep) nesting with labeling
        // [a, b, c] => {label: [{label: [a, b]}, c]}
        function nestRight(lbl, lis) {
            var ret = lis[0];
            lis = lis.slice(1);
            for (var elem in lis) {
                ret = label(lbl, [ret, lis[elem]]);
            }
            return ret;
        }

        // special case of right-associative (i.e. left-deep) nesting with labeling
        // [[a, +], [b, /], c] => {label: {symbol: /, of: [{label: {symbol: +, of: [a, b]}}, c]}}
        function nestRight2(lbl, lis) {
            var ret = lis[0][0];
            var sym = lis[0][1];
            for (var i = 1; i < lis.length; i++) {
                if (i == lis.length - 1) {
                    // don't forget the second component of the final element of lis
                    ret = label(lbl, {symbol: sym, of: [ret, lis[i]]});
                } else {
                    ret = label(lbl, {symbol: sym, of: [ret, lis[i][0]]});
                    sym = lis[i][1];
                }
            }
            return ret;
        }

        // replaces characters of "chars" found in "sources" with correspondingly
        // positioned characters in "targets". all arguments can be strings or
        // lists. returns a string
        function replaceMap(sources, targets, chars) {

            // convert all inputs to lists if necessary
            if (typeof sources === 'string') {
                sources = sources.split('');
            }
            if (typeof targets === 'string') {
                targets = targets.split('');
            }
            if (typeof chars === 'string') {
                chars = chars.split('');
            }

            // perform the lookups
            return chars.map(c => targets[sources.indexOf(c)]).join('');
        }

        // flattens an array of values and arrays
        // flatten([[1,2],3,[4]]) => [1, 2, 3, 4]
        function flatten(a) {
            var aFlat = [];
            a.forEach(function (e) {
                if (Array.isArray(e)) {
                    e.forEach(i => aFlat.push(i));
                } else {
                    aFlat.push(e);
                }
            });
            return aFlat;
        }


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  root.ummlParser = {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})(this);
